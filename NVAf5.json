{
    "$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json", 
    "contentVersion": "3.3.2.0",
  "parameters": {
    "location": {
      "type": "string",
      "metadata": {
        "description": "Region where the resources will be deployed"
      }
    },
    "adminUsername": {
      "metadata": {
        "description": "User name for the Virtual Machine."
      },
      "type": "string"
    },
    "adminPassword": {
      "metadata": {
        "description": "Password to login to the Virtual Machine."
      },
      "type": "securestring"
    },
    "dnsLabel": {
      "metadata": {
        "description": "Unique DNS Name for the Public IP address used to access the Virtual Machine"
      },
      "type": "string"
    },
    "instanceName": {
      "metadata": {
        "description": "Name of the Virtual Machine."
      },
      "type": "string"
    },
    "instanceType": {
      "allowedValues": [
        "Standard_D3_v2",
        "Standard_D4_v2",
        "Standard_D5_v2",
        "Standard_D11_v2",
        "Standard_D12_v2",
        "Standard_D13_v2",
        "Standard_D14_v2",
        "Standard_D15_v2"
      ],
      "defaultValue": "Standard_D3_v2",
      "metadata": {
        "description": "Azure instance size of the Virtual Machine."
      },
      "type": "string"
    },
    "imageName": {
      "allowedValues": [
        "Good",
        "Better",
        "Best"
      ],
      "defaultValue": "Best",
      "metadata": {
        "description": "F5 SKU (IMAGE) to you want to deploy."
      },
      "type": "string"
    },
    "bigIpVersion": {
      "allowedValues": [
        "13.0.021",
        "12.1.24",
        "latest"
      ],
      "defaultValue": "13.0.021",
      "metadata": {
        "description": "F5 BIG-IP version you want to use."
      },
      "type": "string"
    },
    "licensedBandwidth": {
      "allowedValues": [
        "25m",
        "200m",
        "1g"
      ],
      "defaultValue": "200m",
      "metadata": {
        "description": "The amount of licensed bandwidth (Mbps) you want the PAYG image to use."
      },
      "type": "string"
    },
    "numberOfExternalIps": {
      "allowedValues": [
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8
      ],
      "defaultValue": 1,
      "metadata": {
        "description": "The number of public/private IP addresses you want to deploy for the application traffic (external) NIC on the BIG-IP VE to be used for virtual servers."
      },
      "type": "int"
    },
    "vnetName": {
      "metadata": {
        "description": "The name of the existing virtual network to which you want to connect the BIG-IP VEs."
      },
      "type": "string"
    },
    "vnetResourceGroupName": {
      "metadata": {
        "description": "The name of the resource group that contains the Virtual Network where the BIG-IP VE will be placed."
      },
      "type": "string"
    },
    "mgmtSubnetName": {
      "metadata": {
        "description": "Name of the existing MGMT subnet - with external access to the Internet."
      },
      "type": "string"
    },
    "mgmtIpAddressRangeStart": {
      "metadata": {
        "description": "The static private IP address you would like to assign to the management self IP of the first BIG-IP. The next contiguous address will be used for the second BIG-IP device."
      },
      "type": "string"
    },
    "externalSubnetName": {
      "metadata": {
        "description": "Name of the existing external subnet - with external access to Internet."
      },
      "type": "string"
    },
    "externalIpSelfAddressRangeStart": {
      "metadata": {
        "description": "The static private IP address you would like to assign to the external self IP (primary) of the first BIG-IP. The next contiguous address will be used for the second BIG-IP device."
      },
      "type": "string"
    },
    "lbAddressRangeStart": {
      "metadata": {
        "description": "The static private IP address you would like to assign to the Internal Load Balancer"
      },
      "type": "string"
    },
    "externalIpAddressRangeStart": {
      "metadata": {
        "description": "The static private IP address (secondary) you would like to assign to the first shared Azure public IP. An additional private IP address will be assigned for each public IP address you specified in numberOfExternalIps.  For example, inputting 10.100.1.50 here and choosing 2 in numberOfExternalIps would result in 10.100.1.50 and 10.100.1.51 being configured as static private IP addresses for external virtual servers."
      },
      "type": "string"
    },
    "internalSubnetName": {
      "metadata": {
        "description": "Name of the existing internal subnet."
      },
      "type": "string"
    },
    "internalIpAddressRangeStart": {
      "metadata": {
        "description": "The static private IP address you would like to assign to the internal self IP of the first BIG-IP. The next contiguous address will be used for the second BIG-IP device."
      },
      "type": "string"
    },
    "ntpServer": {
      "defaultValue": "0.pool.ntp.org",
      "metadata": {
        "description": "If you would like to change the NTP server the BIG-IP uses then replace the default ntp server with your choice."
      },
      "type": "string"
    },
    "timeZone": {
      "defaultValue": "UTC",
      "metadata": {
        "description": "If you would like to change the time zone the BIG-IP uses then enter your choice. This is in the format of the Olson timezone string from /usr/share/zoneinfo, such as UTC, US/Central or Europe/London."
      },
      "type": "string"
    },
    "restrictedSrcAddress": {
      "defaultValue": "*",
      "metadata": {
        "description": "This field restricts management access to a specific network or address. Enter an IP address or address range in CIDR notation, or asterisk for all sources"
      },
      "type": "string"
    },
    "tagValues": {
      "defaultValue": {
        "application": "APP",
        "cost": "COST",
        "environment": "ENV",
        "group": "GROUP",
        "owner": "OWNER"
      },
      "metadata": {
        "description": "Default key/value resource tags will be added to the resources in this deployment, if you would like the values to be unique adjust them as needed for each key."
      },
      "type": "object"
    }
  },
  "variables": {
    "bigIpNicPortMap": {
      "1": {
        "Port": "[parameters('bigIpVersion')]"
      },
      "2": {
        "Port": "443"
      },
      "3": {
        "Port": "443"
      },
      "4": {
        "Port": "443"
      },
      "5": {
        "Port": "443"
      },
      "6": {
        "Port": "443"
      }
    },
    "bigIpVersionPortMap": {
      "12.1.24": {
        "Port": 443
      },
      "13.0.021": {
        "Port": 8443
      },
      "443": {
        "Port": 443
      },
      "latest": {
        "Port": 8443
      }
    },
    "apiVersion": "2015-06-15",
    "computeApiVersion": "2015-06-15",
    "networkApiVersion": "2015-06-15",
    "storageApiVersion": "2015-06-15",
    "insightsApiVersion": "2015-04-01",
    "location": "[resourceGroup().location]",
    "subscriptionID": "[subscription().subscriptionId]",
    "resourceGroupName": "[resourceGroup().name]",
    "singleQuote": "'",
    "f5Tag": "82e08e16-fc62-4bf0-8916-e1c02dc871cd",
    "f5TemplateTag": "cluster_3nic",
    "f5CloudLibsTag": "v3.3.2",
    "f5CloudLibsAzureTag": "v1.2.1",
    "f5NetworksTag": "v3.3.2.0",
    "f5CloudIappsTag": "v1.0.2",
    "verifyHash": "[concat(variables('singleQuote'), 'cli script /Common/verifyHash {\nproc script::run {} {\n        if {[catch {\n            set hashes(f5-cloud-libs.tar.gz) 1e7b5cb66e140bb4c5650b225612905e17bd167556b0b4366efce2d9138f8be86eec51c09eb96c3ffc2d25ba8965bae840e9d43b7c42dab08cdfad4d3d152509\n            set hashes(f5-cloud-libs-aws.tar.gz) 549aa436be806c80640f8dce570128fdf84613bf0688392e018639412c63818d25f26635b0aaf23e8cdf60b0d331de9218ed51a9cdfbf33db6e683727169a727\n            set hashes(f5-cloud-libs-azure.tar.gz) 08b5a04c2e24c73288037f02734703bba3349d2c1548e618223c927de08769c44b638b60cec3b644dbdb14d242e8f589215b174a22fe28487b9049666158c0d1\n            set hashes(asm-policy-linux.tar.gz) 63b5c2a51ca09c43bd89af3773bbab87c71a6e7f6ad9410b229b4e0a1c483d46f1a9fff39d9944041b02ee9260724027414de592e99f4c2475415323e18a72e0\n            set hashes(f5.http.v1.2.0rc4.tmpl) 47c19a83ebfc7bd1e9e9c35f3424945ef8694aa437eedd17b6a387788d4db1396fefe445199b497064d76967b0d50238154190ca0bd73941298fc257df4dc034\n            set hashes(f5.http.v1.2.0rc6.tmpl) 811b14bffaab5ed0365f0106bb5ce5e4ec22385655ea3ac04de2a39bd9944f51e3714619dae7ca43662c956b5212228858f0592672a2579d4a87769186e2cbfe\n            set hashes(f5.http.v1.2.0rc7.tmpl) 21f413342e9a7a281a0f0e1301e745aa86af21a697d2e6fdc21dd279734936631e92f34bf1c2d2504c201f56ccd75c5c13baa2fe7653213689ec3c9e27dff77d\n            set hashes(f5.aws_advanced_ha.v1.3.0rc1.tmpl) 9e55149c010c1d395abdae3c3d2cb83ec13d31ed39424695e88680cf3ed5a013d626b326711d3d40ef2df46b72d414b4cb8e4f445ea0738dcbd25c4c843ac39d\n            set hashes(f5.aws_advanced_ha.v1.4.0rc1.tmpl) de068455257412a949f1eadccaee8506347e04fd69bfb645001b76f200127668e4a06be2bbb94e10fefc215cfc3665b07945e6d733cbe1a4fa1b88e881590396\n            set hashes(asm-policy.tar.gz) 2d39ec60d006d05d8a1567a1d8aae722419e8b062ad77d6d9a31652971e5e67bc4043d81671ba2a8b12dd229ea46d205144f75374ed4cae58cefa8f9ab6533e6\n            set hashes(deploy_waf.sh) e242eb222ac3d1860df3305f6abec674c1e4f823318bb9d08d30a57dba3acd69e2a45eb52d141effd056a75b12ad4055a2d69b3d1d9a029a369de872dbef5a8a\n            set hashes(f5.policy_creator.tmpl) 06539e08d115efafe55aa507ecb4e443e83bdb1f5825a9514954ef6ca56d240ed00c7b5d67bd8f67b815ee9dd46451984701d058c89dae2434c89715d375a620\n            set hashes(f5.service_discovery.tmpl) 8d7491accdb1818f09353cd5b03d317ccd87e6801ac25b47aa49984a0f4ca313e8f3ecc1c9c904ce01c89dfeeacd3487655c8d45cc43f83c2ccd54d71f4f7d5f\n\n            set file_path [lindex $tmsh::argv 1]\n            set file_name [file tail $file_path]\n\n            if {![info exists hashes($file_name)]} {\n                tmsh::log err \"No hash found for $file_name\"\n                exit 1\n            }\n\n            set expected_hash $hashes($file_name)\n            set computed_hash [lindex [exec /usr/bin/openssl dgst -r -sha512 $file_path] 0]\n            if { $expected_hash eq $computed_hash } {\n                exit 0\n            }\n            tmsh::log err \"Hash does not match for $file_path\"\n            exit 1\n        }]} {\n            tmsh::log err {Unexpected error in verifyHash}\n            exit 1\n        }\n    }\n    script-signature ovvaKnQES5v5qKb7reE7dSzbb/EC5X/8onLV4YE75Ru8LR7LxNzFiNXpNM73SjIx1noAcEqGNBIQ0wFlqKh26gPLFPmwBsiu4jrU/MHkd/CwjHipE1uQiy79476rQTgiugwh+56j2ss96nKCtNKbKHsyrtGgO1GQWskz+B3qyx7XYa1gi3fNBkDzd5YuJ8HFJGjffbbMBpGW/fFUL0QQsGAO6QLhzKdxonm4hbqR8E/x+BmPzU08O9QzSG4tFcPQRN40py9tTEkyqnAziolDPArmBkx5aCRqy5lnzBd90GJemMLx5QcGYn0D4EP9aQZTquDtrT9A+kgPXRmukmi8JA==\n    signing-key /Common/f5-irule\n}', variables('singleQuote'))]",
    "installCloudLibs": "[concat(variables('singleQuote'), '#!/bin/bash\necho about to execute\nchecks=0\nwhile [ $checks -lt 120 ]; do echo checking mcpd\n/usr/bin/tmsh -a show sys mcp-state field-fmt | grep -q running\nif [ $? == 0 ]; then\necho mcpd ready\nbreak\nfi\necho mcpd not ready yet\nlet checks=checks+1\nsleep 1\ndone\necho loading verifyHash script\n/usr/bin/tmsh load sys config merge file /config/verifyHash\nif [ $? != 0 ]; then\necho cannot validate signature of /config/verifyHash\nexit 1\nfi\necho loaded verifyHash\nconfig_loc=\"/config/cloud/\"\nhashed_file_list=\"${config_loc}f5-cloud-libs.tar.gz f5.service_discovery.tmpl\"\nfor file in $hashed_file_list; do\necho \"verifying $file\"\n/usr/bin/tmsh run cli script verifyHash $file\nif [ $? != 0 ]; then\necho \"$file is not valid\"\nexit 1\nfi\necho \"verified $file\"\ndone\necho \"expanding $hashed_file_list\"\ntar xvfz /config/cloud/f5-cloud-libs.tar.gz -C /config/cloud/node_modules\ntouch /config/cloud/cloudLibsReady', variables('singleQuote'))]",
    "dnsLabel": "[toLower(parameters('dnsLabel'))]",
    "imageNameToLower": "[toLower(parameters('imageName'))]",
    "skuToUse": "[concat('f5-bigip-virtual-edition-', parameters('licensedBandwidth'), '-', variables('imageNameToLower'),'-hourly')]",
    "offerToUse": "f5-big-ip-hourly",
    "bigIpNicPortValue": "[variables('bigIpNicPortMap')['3'].Port]",
    "bigIpMgmtPort": "[variables('bigIpVersionPortMap')[variables('bigIpNicPortValue')].Port]",
    "instanceName": "[toLower(parameters('instanceName'))]",
    "availabilitySetName": "[concat(variables('dnsLabel'), '-avset')]",
    "virtualNetworkName": "[parameters('vnetName')]",
    "vnetId": "[resourceId(parameters('vnetResourceGroupName'),'Microsoft.Network/virtualNetworks',variables('virtualNetworkName'))]",
    "publicIPAddressType": "Static",
    "mgmtPublicIPAddressName": "[concat(variables('dnsLabel'), '-mgmt-pip')]",
    "mgmtPublicIPAddressId": "[resourceId('Microsoft.Network/publicIPAddresses', variables('mgmtPublicIPAddressName'))]",
    "mgmtNsgID": "[resourceId('Microsoft.Network/networkSecurityGroups/',concat(variables('dnsLabel'),'-mgmt-nsg'))]",
    "mgmtNicName": "[concat(variables('dnsLabel'), '-mgmt')]",
    "mgmtSubnetName": "[parameters('mgmtSubnetName')]",
    "mgmtSubnetId": "[concat(variables('vnetId'), '/subnets/', variables('mgmtSubnetName'))]",
    "mgmtSubnetPrivateAddressPrefixArray": "[split(parameters('mgmtIpAddressRangeStart'), '.')]",
    "mgmtSubnetPrivateAddressPrefix": "[concat(variables('mgmtSubnetPrivateAddressPrefixArray')[0], '.', variables('mgmtSubnetPrivateAddressPrefixArray')[1], '.', variables('mgmtSubnetPrivateAddressPrefixArray')[2], '.')]",
    "mgmtSubnetPrivateAddressSuffixInt": "[int(variables('mgmtSubnetPrivateAddressPrefixArray')[3])]",
    "mgmtSubnetPrivateAddressSuffix": "[add(variables('mgmtSubnetPrivateAddressSuffixInt'), 1)]",
    "mgmtSubnetPrivateAddress": "[parameters('mgmtIpAddressRangeStart')]",
    "mgmtSubnetPrivateAddress1": "[concat(variables('mgmtSubnetPrivateAddressPrefix'), variables('mgmtSubnetPrivateAddressSuffix'))]",
    "extSelfPublicIpAddressNamePrefix": "[concat(variables('dnsLabel'), '-self-pip')]",
    "extSelfPublicIpAddressIdPrefix": "[resourceId('Microsoft.Network/publicIPAddresses', variables('extSelfPublicIpAddressNamePrefix'))]",
    "extpublicIPAddressNamePrefix": "[concat(variables('dnsLabel'), '-ext-pip')]",
    "extPublicIPAddressIdPrefix": "[resourceId('Microsoft.Network/publicIPAddresses', variables('extPublicIPAddressNamePrefix'))]",
    "extNsgID": "[resourceId('Microsoft.Network/networkSecurityGroups/',concat(variables('dnsLabel'),'-ext-nsg'))]",
    "extNicName": "[concat(variables('dnsLabel'), '-ext')]",
    "extSubnetName": "[parameters('externalSubnetName')]",
    "extSubnetId": "[concat(variables('vnetId'), '/subnets/', variables('extsubnetName'))]",
    "extSubnetSelfPrivateAddressPrefixArray": "[split(parameters('externalIpSelfAddressRangeStart'), '.')]",
    "extSubnetSelfPrivateAddressPrefix": "[concat(variables('extSubnetSelfPrivateAddressPrefixArray')[0], '.', variables('extSubnetSelfPrivateAddressPrefixArray')[1], '.', variables('extSubnetSelfPrivateAddressPrefixArray')[2], '.')]",
    "extSubnetSelfPrivateAddressSuffixInt": "[int(variables('extSubnetSelfPrivateAddressPrefixArray')[3])]",
    "extSubnetSelfPrivateAddressSuffix": "[add(variables('extSubnetSelfPrivateAddressSuffixInt'), 1)]",

    "lbAddressPrefixArray": "[split(parameters('lbAddressRangeStart'), '.')]",
    "lbAddressPrefix": "[concat(variables('lbAddressPrefixArray')[0], '.', variables('lbAddressPrefixArray')[1], '.', variables('lbAddressPrefixArray')[2], '.')]",
    "lbAddressSuffixInt": "[int(variables('lbAddressPrefixArray')[3])]",
    "lbAddressSuffix0": "[add(variables('lbAddressSuffixInt'), 1)]",
    "lbAddressSuffix1": "[add(variables('lbAddressSuffixInt'), 2)]",
    "lbAddressSuffix2": "[add(variables('lbAddressSuffixInt'), 3)]",
    "lbAddressSuffix3": "[add(variables('lbAddressSuffixInt'), 4)]",
    "lbAddressSuffix4": "[add(variables('lbAddressSuffixInt'), 5)]",





    "extSubnetPrivateAddress": "[parameters('externalIpSelfAddressRangeStart')]",
    "extSubnetPrivateAddress1": "[concat(variables('extSubnetSelfPrivateAddressPrefix'), variables('extSubnetSelfPrivateAddressSuffix'))]",
    "extSubnetPrivateAddressPrefixArray": "[split(parameters('externalIpAddressRangeStart'), '.')]",
    "extSubnetPrivateAddressPrefix": "[concat(variables('extSubnetPrivateAddressPrefixArray')[0], '.', variables('extSubnetPrivateAddressPrefixArray')[1], '.', variables('extSubnetPrivateAddressPrefixArray')[2], '.')]",
    "extSubnetPrivateAddressSuffixInt": "[int(variables('extSubnetPrivateAddressPrefixArray')[3])]",
    "extSubnetPrivateAddressSuffix0": "[add(variables('extSubnetPrivateAddressSuffixInt'), 1)]",
    "extSubnetPrivateAddressSuffix1": "[add(variables('extSubnetPrivateAddressSuffixInt'), 2)]",
    "intNicName": "[concat(variables('dnsLabel'), '-int')]",
    "intSubnetName": "[parameters('internalSubnetName')]",
    "intSubnetId": "[concat(variables('vnetId'), '/subnets/', variables('intsubnetName'))]",
    "ProbeName": "httpsprobe",
    "ProbeID": "[concat(variables('lbID'),'/probes/', variables('ProbeName'))]",
    "intSubnetPrivateAddress": "[parameters('internalIpAddressRangeStart')]",
    "intSubnetPrivateAddress1": "[concat(variables('intSubnetPrivateAddressPrefix'), variables('intSubnetPrivateAddressSuffix'))]",
    "intSubnetPrivateAddressPrefixArray": "[split(parameters('internalIpAddressRangeStart'), '.')]",
    "intSubnetPrivateAddressPrefix": "[concat(variables('intSubnetPrivateAddressPrefixArray')[0], '.', variables('intSubnetPrivateAddressPrefixArray')[1], '.', variables('intSubnetPrivateAddressPrefixArray')[2], '.')]",
    "intSubnetPrivateAddressSuffixInt": "[int(variables('intSubnetPrivateAddressPrefixArray')[3])]",
    "intSubnetPrivateAddressSuffix": "[add(variables('intSubnetPrivateAddressSuffixInt'), 1)]",
    "extSubnetRef": "[concat('/subscriptions/', variables('subscriptionID'), '/resourceGroups/', parameters('vnetResourceGroupName'), '/providers/Microsoft.Network/virtualNetworks/', parameters('vnetName'), '/subnets/', parameters('externalSubnetName'))]",
    "intSubnetRef": "[concat('/subscriptions/', variables('subscriptionID'), '/resourceGroups/', parameters('vnetResourceGroupName'), '/providers/Microsoft.Network/virtualNetworks/', parameters('vnetName'), '/subnets/', parameters('internalSubnetName'))]",
    "numberOfExternalIps": "[parameters('numberOfExternalIps')]",
    "mgmtRouteGw": "`tmsh list sys management-route default gateway | grep gateway | sed 's/gateway //;s/ //g'`",
    "routeCmdArray": {
      "12.1.24": "[concat('route add 168.63.129.16 gw ', variables('mgmtRouteGw'), ' eth0')]",
      "13.0.021": "route",
      "latest": "route"
    },
    "selfIpconfigArray": [
      {
        "name": "[concat(variables('instanceName'), '-self-ipconfig')]",
        "properties": {

          "primary": true,
          "privateIPAddress": "[variables('extSubnetPrivateAddress')]",
          "privateIPAllocationMethod": "Static",
          "subnet": {
            "id": "[variables('extSubnetId')]"
          }
        }
      },
      {
        "name": "[concat(variables('instanceName'), '-self-ipconfig')]",
        "properties": {

          "primary": true,
          "privateIPAddress": "[variables('extSubnetPrivateAddress1')]",
          "privateIPAllocationMethod": "Static",
          "subnet": {
            "id": "[variables('extSubnetId')]"
          }
        }
      }
    ],
    "extIpconfigArray": [
      {
        "name": "[concat(variables('resourceGroupName'), '-ext-ipconfig0')]",
        "properties": {
          "loadBalancerBackendAddressPools": [
            {
              "id": "[concat(variables('lbID'), '/backendAddressPools/', 'loadBalancerBackEnd')]"
            }
          ],
          "primary": false,
          "privateIPAddress": "[concat(variables('extSubnetPrivateAddressPrefix'), variables('extSubnetPrivateAddressSuffix0'))]",
          "privateIPAllocationMethod": "Static",
          "subnet": {
            "id": "[variables('extSubnetId')]"
          }
        }
      },
      {
        "name": "[concat(variables('resourceGroupName'), '-ext-ipconfig1')]",
        "properties": {
          "loadBalancerBackendAddressPools": [
            {
              "id": "[concat(variables('lbID'), '/backendAddressPools/', 'loadBalancerBackEnd')]"
            }
          ],
          "primary": false,
          "privateIPAddress": "[concat(variables('extSubnetPrivateAddressPrefix'), variables('extSubnetPrivateAddressSuffix1'))]",
          "privateIPAllocationMethod": "Static",
          "subnet": {
            "id": "[variables('extSubnetId')]"
          }
        }
      }
    ],
    "lbFrontEndArray": [
      {
        "name": "loadBalancerFrontEnd0",
        "properties": {
          "privateIPAddress": "[concat(variables('lbAddressPrefix'), variables('lbAddressSuffix0'))]",
          "privateIPAllocationMethod": "static",
          "subnet": {
            "id": "[variables('extSubnetId')]"
          }
        }
      },
      {
        "name": "loadBalancerFrontEnd1",
        "properties": {
          "privateIPAddress": "[concat(variables('lbAddressPrefix'), variables('lbAddressSuffix1'))]",
          "privateIPAllocationMethod": "static",
          "subnet": {
            "id": "[variables('extSubnetId')]"
          }
        }
      },
      {
        "name": "loadBalancerFrontEnd2",
        "properties": {
          "privateIPAddress": "[concat(variables('lbAddressPrefix'), variables('lbAddressSuffix2'))]",
          "privateIPAllocationMethod": "static",
          "subnet": {
            "id": "[variables('extSubnetId')]"
          }
        }
      },
      {
        "name": "loadBalancerFrontEnd3",
        "properties": {
          "privateIPAddress": "[concat(variables('lbAddressPrefix'), variables('lbAddressSuffix3'))]",
          "privateIPAllocationMethod": "static",
          "subnet": {
            "id": "[variables('extSubnetId')]"
          }
        }
      },
      {
        "name": "loadBalancerFrontEnd4",
        "properties": {
          "privateIPAddress": "[concat(variables('lbAddressPrefix'), variables('lbAddressSuffix4'))]",
          "privateIPAllocationMethod": "static",
          "subnet": {
            "id": "[variables('extSubnetId')]"
          }
        }
      }
    ],
    "loadBalancerName": "[concat(variables('dnsLabel'),'-alb')]",
    "lbID": "[resourceId('Microsoft.Network/loadBalancers',variables('loadBalancerName'))]",
    "instanceTypeMap": {
      "Standard_A3": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_A4": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_A5": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_A6": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_A7": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_D11": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_D11_v2": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_D12": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_D12_v2": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_D13": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_D13_v2": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_D14": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_D14_v2": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_D15_v2": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_D2": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_D2_v2": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_D3": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_D3_v2": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_D4": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_D4_v2": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_D5_v2": {
        "storageAccountType": "Standard_LRS"
      }
    },
    "newStorageAccountName": "[concat(uniqueString(resourceGroup().id, deployment().name), 'stor01')]",
    "newStorageAccountName2": "[concat(uniqueString(resourceGroup().id, deployment().name), 'stor02')]",
    "storageAccountType": "[variables('instanceTypeMap')[parameters('instanceType')].storageAccountType]",
    "newDataStorageAccountName": "[concat(uniqueString(resourceGroup().id, deployment().name), 'diag01')]",
    "newDataStorageAccountName2": "[concat(uniqueString(resourceGroup().id, deployment().name), 'diag02')]",
    "dataStorageAccountType": "Standard_LRS",
    "customConfig": "### START (INPUT) CUSTOM CONFIGURATION HERE\n",
    "installCustomConfig": "[concat(variables('singleQuote'), '#!/bin/bash\n', variables('customConfig'), variables('singleQuote'))]"
  },
  "resources": [

    {
      "apiVersion": "[variables('apiVersion')]",
      "location": "[variables('location')]",
      "type": "Microsoft.Network/networkInterfaces",
      "name": "[concat(variables('mgmtNicName'), '0')]",
      "properties": {
        "ipConfigurations": [
          {
            "name": "[concat(variables('mgmtNicName'), '0', '-ipconfig')]",
            "properties": {

              "privateIPAddress": "[variables('mgmtSubnetPrivateAddress')]",
              "privateIPAllocationMethod": "Static",
              "subnet": {
                "id": "[variables('mgmtSubnetId')]"
              }
            }
          }
        ]

      },
      "tags": {
        "application": "[parameters('tagValues').application]",
        "costCenter": "[parameters('tagValues').cost]",
        "environment": "[parameters('tagValues').environment]",
        "f5": "[variables('f5Tag')]",
        "f5Template": "[variables('f5TemplateTag')]",
        "group": "[parameters('tagValues').group]",
        "owner": "[parameters('tagValues').owner]"
      }

    },
    {
      "apiVersion": "[variables('apiVersion')]",
      "type": "Microsoft.Network/networkInterfaces",
      "location": "[variables('location')]",
      "name": "[concat(variables('mgmtNicName'), '1')]",
      "properties": {
        "ipConfigurations": [
          {
            "name": "[concat(variables('mgmtNicName'), '1', '-ipconfig')]",
            "properties": {
              "privateIPAddress": "[variables('mgmtSubnetPrivateAddress1')]",
              "privateIPAllocationMethod": "Static",
              "subnet": {
                "id": "[variables('mgmtSubnetId')]"
              }
            }
          }
        ]
      },
      "tags": {
        "application": "[parameters('tagValues').application]",
        "costCenter": "[parameters('tagValues').cost]",
        "environment": "[parameters('tagValues').environment]",
        "f5": "[variables('f5Tag')]",
        "f5Template": "[variables('f5TemplateTag')]",
        "group": "[parameters('tagValues').group]",
        "owner": "[parameters('tagValues').owner]"
      }

    },
    {
      "apiVersion": "[variables('apiVersion')]",
      "type": "Microsoft.Network/networkInterfaces",
      "location": "[variables('location')]",
      "name": "[concat(variables('extNicName'), '0')]",
      "dependson": [
        "[concat('Microsoft.Network/loadBalancers/', variables('loadBalancerName'))]"
      ],
      "properties": {
        "ipConfigurations": "[concat(take(variables('selfIpConfigArray'), 1), take(variables('extIpconfigArray'), 1))]"

      },
      "tags": {
        "application": "[parameters('tagValues').application]",
        "costCenter": "[parameters('tagValues').cost]",
        "environment": "[parameters('tagValues').environment]",
        "f5": "[variables('f5Tag')]",
        "f5Template": "[variables('f5TemplateTag')]",
        "group": "[parameters('tagValues').group]",
        "owner": "[parameters('tagValues').owner]"
      }

    },
    {
      "apiVersion": "[variables('apiVersion')]",
      "type": "Microsoft.Network/networkInterfaces",
      "location": "[variables('location')]",
      "name": "[concat(variables('extNicName'), '1')]",
      "dependson": [
        "[concat('Microsoft.Network/loadBalancers/', variables('loadBalancerName'))]"
      ],
      "properties": {
        "ipConfigurations": "[concat(skip(variables('selfIpConfigArray'), 1), skip(variables('extIpconfigArray'), 1))]"

      },
      "tags": {
        "application": "[parameters('tagValues').application]",
        "costCenter": "[parameters('tagValues').cost]",
        "environment": "[parameters('tagValues').environment]",
        "f5": "[variables('f5Tag')]",
        "f5Template": "[variables('f5TemplateTag')]",
        "group": "[parameters('tagValues').group]",
        "owner": "[parameters('tagValues').owner]"
      }

    },
    {
      "apiVersion": "[variables('apiVersion')]",
      "type": "Microsoft.Network/networkInterfaces",
      "location": "[variables('location')]",
      "name": "[concat(variables('intNicName'), '0')]",
      "properties": {
        "enableIPForwarding": true,
        "ipConfigurations": [
          {
            "name": "[concat(variables('intNicName'), '0', '-ipconfig')]",
            "properties": {
              "privateIPAddress": "[variables('intSubnetPrivateAddress')]",
              "privateIPAllocationMethod": "Static",
              "subnet": {
                "id": "[variables('intSubnetId')]"
              }
            }
          }
        ]
      },
      "tags": {
        "application": "[parameters('tagValues').application]",
        "costCenter": "[parameters('tagValues').cost]",
        "environment": "[parameters('tagValues').environment]",
        "f5": "[variables('f5Tag')]",
        "f5Template": "[variables('f5TemplateTag')]",
        "group": "[parameters('tagValues').group]",
        "owner": "[parameters('tagValues').owner]"
      }

    },
    {
      "apiVersion": "[variables('apiVersion')]",
      "type": "Microsoft.Network/networkInterfaces",
      "location": "[variables('location')]",
      "name": "[concat(variables('intNicName'), '1')]",
      "properties": {
        "enableIPForwarding": true,
        "ipConfigurations": [
          {
            "name": "[concat(variables('intNicName'), '1', '-int-ipconfig')]",
            "properties": {
              "privateIPAddress": "[variables('intSubnetPrivateAddress1')]",
              "privateIPAllocationMethod": "Static",
              "subnet": {
                "id": "[variables('intSubnetId')]"
              }
            }
          }
        ]
      },
      "tags": {
        "application": "[parameters('tagValues').application]",
        "costCenter": "[parameters('tagValues').cost]",
        "environment": "[parameters('tagValues').environment]",
        "f5": "[variables('f5Tag')]",
        "f5Template": "[variables('f5TemplateTag')]",
        "group": "[parameters('tagValues').group]",
        "owner": "[parameters('tagValues').owner]"
      }

    },

    {
      "apiVersion": "[variables('networkApiVersion')]",
      "type": "Microsoft.Network/loadBalancers",
      "location": "[variables('location')]",
      "name": "[variables('loadBalancerName')]",
      "properties": {
        "backendAddressPools": [
          {
            "name": "loadBalancerBackEnd"
          }
        ],
        "frontendIPConfigurations": "[variables('lbFrontEndArray')]",
        "loadBalancingRules": [
          {
            "name": "InboundHTTPS",
            "properties": {
              "frontendIPConfiguration": {
                "id": "[concat(variables('lbID'),'/frontendIPconfigurations/loadBalancerFrontEnd0')]"
              },
              "backendAddressPool": {
                "id": "[concat(variables('lbID'),'/backendAddressPools/loadBalancerBackEnd')]"
              },
              "protocol": "Tcp",
              "frontendPort": 443,
              "backendPort": 443,
              "enableFloatingIP": false,
              "idleTimeoutInMinutes": 5,
              "probe": {
                "id": "[variables('ProbeID')]"
              }

            }

          }
        ],
        "probes": [
          {
            "name": "[variables('ProbeName')]",
            "properties": {
              "protocol": "Tcp",
              "port": 443,
              "intervalInSeconds": 5,
              "numberOfProbes": 2
            }


          }


        ]
      },

      "tags": {
        "application": "[parameters('tagValues').application]",
        "costCenter": "[parameters('tagValues').cost]",
        "environment": "[parameters('tagValues').environment]",
        "f5": "[variables('f5Tag')]",
        "f5Template": "[variables('f5TemplateTag')]",
        "group": "[parameters('tagValues').group]",
        "owner": "[parameters('tagValues').owner]"
      }
    },
    {
      "apiVersion": "[variables('apiVersion')]",
      "location": "[variables('location')]",
      "name": "[variables('availabilitySetName')]",
      "tags": {
        "application": "[parameters('tagValues').application]",
        "costCenter": "[parameters('tagValues').cost]",
        "environment": "[parameters('tagValues').environment]",
        "f5": "[variables('f5Tag')]",
        "f5Template": "[variables('f5TemplateTag')]",
        "group": "[parameters('tagValues').group]",
        "owner": "[parameters('tagValues').owner]"
      },
      "type": "Microsoft.Compute/availabilitySets"
    },
    {
      "apiVersion": "[variables('storageApiVersion')]",
      "location": "[variables('location')]",
      "name": "[variables('newStorageAccountName')]",
      "properties": {
        "accountType": "[variables('storageAccountType')]"
      },
      "tags": {
        "application": "[parameters('tagValues').application]",
        "costCenter": "[parameters('tagValues').cost]",
        "environment": "[parameters('tagValues').environment]",
        "f5": "[variables('f5Tag')]",
        "f5Template": "[variables('f5TemplateTag')]",
        "group": "[parameters('tagValues').group]",
        "owner": "[parameters('tagValues').owner]"
      },
      "type": "Microsoft.Storage/storageAccounts"
    },
    {
      "apiVersion": "[variables('storageApiVersion')]",
      "location": "[variables('location')]",
      "name": "[variables('newStorageAccountName2')]",
      "properties": {
        "accountType": "[variables('storageAccountType')]"
      },
      "tags": {
        "application": "[parameters('tagValues').application]",
        "costCenter": "[parameters('tagValues').cost]",
        "environment": "[parameters('tagValues').environment]",
        "f5": "[variables('f5Tag')]",
        "f5Template": "[variables('f5TemplateTag')]",
        "group": "[parameters('tagValues').group]",
        "owner": "[parameters('tagValues').owner]"
      },
      "type": "Microsoft.Storage/storageAccounts"
    },
    {
      "apiVersion": "[variables('storageApiVersion')]",
      "location": "[variables('location')]",
      "name": "[variables('newDataStorageAccountName')]",
      "properties": {
        "accountType": "[variables('storageAccountType')]"
      },
      "tags": {
        "application": "[parameters('tagValues').application]",
        "costCenter": "[parameters('tagValues').cost]",
        "environment": "[parameters('tagValues').environment]",
        "f5": "[variables('f5Tag')]",
        "f5Template": "[variables('f5TemplateTag')]",
        "group": "[parameters('tagValues').group]",
        "owner": "[parameters('tagValues').owner]"
      },
      "type": "Microsoft.Storage/storageAccounts"
    },
    {
      "apiVersion": "[variables('storageApiVersion')]",
      "location": "[variables('location')]",
      "name": "[variables('newDataStorageAccountName2')]",
      "properties": {
        "accountType": "[variables('dataStorageAccountType')]"
      },
      "tags": {
        "application": "[parameters('tagValues').application]",
        "costCenter": "[parameters('tagValues').cost]",
        "environment": "[parameters('tagValues').environment]",
        "f5": "[variables('f5Tag')]",
        "f5Template": "[variables('f5TemplateTag')]",
        "group": "[parameters('tagValues').group]",
        "owner": "[parameters('tagValues').owner]"
      },
      "type": "Microsoft.Storage/storageAccounts"
    },
    {
      "apiVersion": "[variables('apiVersion')]",
      "dependsOn": [
        "[concat('Microsoft.Network/networkInterfaces/', variables('mgmtNicName'), '0')]",
        "[concat('Microsoft.Network/networkInterfaces/', variables('extNicName'), '0')]",
        "[concat('Microsoft.Network/networkInterfaces/', variables('intNicName'), '0')]",
        "[concat('Microsoft.Compute/availabilitySets/', variables('availabilitySetName'))]",
        "[concat('Microsoft.Storage/storageAccounts/', variables('newStorageAccountName'))]",
        "[concat('Microsoft.Storage/storageAccounts/', variables('newDataStorageAccountName'))]"
      ],
      "location": "[variables('location')]",
      "name": "[concat(variables('dnsLabel'), '-', variables('instanceName'), '0')]",
      "plan": {
        "name": "[variables('skuToUse')]",
        "product": "[variables('offerToUse')]",
        "publisher": "f5-networks"
      },
      "properties": {
        "availabilitySet": {
          "id": "[resourceId('Microsoft.Compute/availabilitySets', variables('availabilitySetName'))]"
        },
        "diagnosticsProfile": {
          "bootDiagnostics": {
            "enabled": true,
            "storageUri": "[concat('http://',variables('newDataStorageAccountName'),'.blob.core.windows.net')]"
          }
        },
        "hardwareProfile": {
          "vmSize": "[parameters('instanceType')]"
        },
        "networkProfile": {
          "networkInterfaces": [
            {
              "id": "[resourceId('Microsoft.Network/networkInterfaces/', concat(variables('mgmtNicName'), '0'))]",
              "properties": {
                "primary": true
              }
            },
            {
              "id": "[resourceId('Microsoft.Network/networkInterfaces/', concat(variables('extNicName'), '0'))]",
              "properties": {
                "primary": false
              }
            },
            {
              "id": "[resourceId('Microsoft.Network/networkInterfaces/', concat(variables('intNicName'), '0'))]",
              "properties": {
                "primary": false
              }
            }
          ]
        },
        "osProfile": {
          "adminPassword": "[parameters('adminPassword')]",
          "adminUsername": "[parameters('adminUsername')]",
          "computerName": "[variables('instanceName')]"
        },
        "storageProfile": {
          "imageReference": {
            "offer": "[variables('offerToUse')]",
            "publisher": "f5-networks",
            "sku": "[variables('skuToUse')]",
            "version": "[parameters('bigIpVersion')]"
          },
          "osDisk": {
            "caching": "ReadWrite",
            "createOption": "FromImage",
            "name": "osdisk",
            "vhd": {
              "uri": "[concat(reference(concat('Microsoft.Storage/storageAccounts/', variables('newStorageAccountName')), providers('Microsoft.Storage', 'storageAccounts').apiVersions[0]).primaryEndpoints.blob, 'vhds/', variables('instanceName'),'0.vhd')]"
            }
          }
        }
      },
      "tags": {
        "application": "[parameters('tagValues').application]",
        "costCenter": "[parameters('tagValues').cost]",
        "environment": "[parameters('tagValues').environment]",
        "f5": "[variables('f5Tag')]",
        "f5Template": "[variables('f5TemplateTag')]",
        "group": "[parameters('tagValues').group]",
        "owner": "[parameters('tagValues').owner]"
      },
      "type": "Microsoft.Compute/virtualMachines"
    },
    {
      "apiVersion": "[variables('apiVersion')]",
      "dependsOn": [
        "[concat('Microsoft.Network/networkInterfaces/', variables('mgmtNicName'), '1')]",
        "[concat('Microsoft.Network/networkInterfaces/', variables('extNicName'), '1')]",
        "[concat('Microsoft.Network/networkInterfaces/', variables('intNicName'), '1')]",
        "[concat('Microsoft.Compute/availabilitySets/', variables('availabilitySetName'))]",
        "[concat('Microsoft.Storage/storageAccounts/', variables('newStorageAccountName2'))]",
        "[concat('Microsoft.Storage/storageAccounts/', variables('newDataStorageAccountName2'))]"
      ],
      "location": "[variables('location')]",
      "name": "[concat(variables('dnsLabel'), '-', variables('instanceName'), '1')]",
      "plan": {
        "name": "[variables('skuToUse')]",
        "product": "[variables('offerToUse')]",
        "publisher": "f5-networks"
      },
      "properties": {
        "availabilitySet": {
          "id": "[resourceId('Microsoft.Compute/availabilitySets', variables('availabilitySetName'))]"
        },
        "diagnosticsProfile": {
          "bootDiagnostics": {
            "enabled": true,
            "storageUri": "[concat('http://',variables('newDataStorageAccountName2'),'.blob.core.windows.net')]"
          }
        },
        "hardwareProfile": {
          "vmSize": "[parameters('instanceType')]"
        },
        "networkProfile": {
          "networkInterfaces": [
            {
              "id": "[resourceId('Microsoft.Network/networkInterfaces/', concat(variables('mgmtNicName'), '1'))]",
              "properties": {
                "primary": true
              }
            },
            {
              "id": "[resourceId('Microsoft.Network/networkInterfaces/', concat(variables('extNicName'), '1'))]",
              "properties": {
                "primary": false
              }
            },
            {
              "id": "[resourceId('Microsoft.Network/networkInterfaces/', concat(variables('intNicName'), '1'))]",
              "properties": {
                "primary": false
              }
            }
          ]
        },
        "osProfile": {
          "adminPassword": "[parameters('adminPassword')]",
          "adminUsername": "[parameters('adminUsername')]",
          "computerName": "[variables('instanceName')]"
        },
        "storageProfile": {
          "imageReference": {
            "offer": "[variables('offerToUse')]",
            "publisher": "f5-networks",
            "sku": "[variables('skuToUse')]",
            "version": "[parameters('bigIpVersion')]"
          },
          "osDisk": {
            "caching": "ReadWrite",
            "createOption": "FromImage",
            "name": "osdisk",
            "vhd": {
              "uri": "[concat(reference(concat('Microsoft.Storage/storageAccounts/', variables('newStorageAccountName2')), providers('Microsoft.Storage', 'storageAccounts').apiVersions[0]).primaryEndpoints.blob, 'vhds/', variables('instanceName'),'1.vhd')]"
            }
          }
        }
      },
      "tags": {
        "application": "[parameters('tagValues').application]",
        "costCenter": "[parameters('tagValues').cost]",
        "environment": "[parameters('tagValues').environment]",
        "f5": "[variables('f5Tag')]",
        "f5Template": "[variables('f5TemplateTag')]",
        "group": "[parameters('tagValues').group]",
        "owner": "[parameters('tagValues').owner]"
      },
      "type": "Microsoft.Compute/virtualMachines"
    },
    {
      "apiVersion": "[variables('computeApiVersion')]",
      "dependsOn": [
        "[concat('Microsoft.Compute/virtualMachines/', variables('dnsLabel'), '-', variables('instanceName'), '0')]"
      ],
      "location": "[variables('location')]",
      "name": "[concat(variables('dnsLabel'), '-', variables('instanceName'), '0/start')]",
      "properties": {
        "autoUpgradeMinorVersion": "true",
        "protectedSettings": {
          "commandToExecute": "[concat('mkdir /config/cloud && cp f5-cloud-libs.tar.gz* /config/cloud; mkdir -p /config/cloud/node_modules; BIG_IP_CREDENTIALS_FILE=/config/cloud/passwd; /usr/bin/install -b -m 755 /dev/null /config/verifyHash; /usr/bin/install -b -m 755 /dev/null /config/installCloudLibs.sh; /usr/bin/install -b -m 400 /dev/null $BIG_IP_CREDENTIALS_FILE; IFS=', variables('singleQuote'), '%', variables('singleQuote'), '; echo -e ', variables('verifyHash'), ' >> /config/verifyHash; echo -e ', variables('installCloudLibs'), ' >> /config/installCloudLibs.sh; echo -e ', variables('installCustomConfig'), ' >> /config/customConfig.sh; echo ', variables('singleQuote'), parameters('adminPassword'), variables('singleQuote'), ' >> $BIG_IP_CREDENTIALS_FILE; unset IFS; bash /config/installCloudLibs.sh; /usr/bin/f5-rest-node /config/cloud/node_modules/f5-cloud-libs/scripts/onboard.js --output /var/log/onboard.log --log-level debug --host ', variables('mgmtSubnetPrivateAddress'), ' --port ', variables('bigIpMgmtPort'), ' --ssl-port ', variables('bigIpMgmtPort'), ' -u admin --password-url file:///config/cloud/passwd --hostname ', concat(variables('instanceName'), '0.', resourceGroup().location, '.cloudapp.azure.com'),  ' --ntp ', parameters('ntpServer'), ' --tz ', parameters('timeZone'), ' --db tmm.maxremoteloglength:2048 --module ltm:nominal --module afm:none; /usr/bin/f5-rest-node /config/cloud/node_modules/f5-cloud-libs/scripts/network.js --output /var/log/network.log --host ', variables('mgmtSubnetPrivateAddress'), ' --port ', variables('bigIpMgmtPort'), ' -u admin --password-url file:///config/cloud/passwd --default-gw ', concat(take(reference(variables('extSubnetRef'), variables('networkApiVersion')).addressPrefix, add(lastIndexOf(reference(variables('extSubnetRef'), variables('networkApiVersion')).addressPrefix, '.'), 1)), add(int(take(split(reference(variables('extSubnetRef'), variables('networkApiVersion')).addressPrefix, '.')[3], indexOf(split(reference(variables('extSubnetRef'), variables('networkApiVersion')).addressPrefix, '.')[3], '/'))), 1)), ' --vlan name:external,nic:1.1 --vlan name:internal,nic:1.2 --self-ip name:self_2nic,address:', variables('extSubnetPrivateAddress'), skip(reference(variables('extSubnetRef'), variables('networkApiVersion')).addressPrefix, indexOf(reference(variables('extSubnetRef'), variables('networkApiVersion')).addressPrefix, '/')), ',vlan:external --self-ip name:self_3nic,address:', variables('intSubnetPrivateAddress'), skip(reference(variables('intSubnetRef'), variables('networkApiVersion')).addressPrefix, indexOf(reference(variables('intSubnetRef'), variables('networkApiVersion')).addressPrefix, '/')), ',vlan:internal --log-level debug; /usr/bin/f5-rest-node /config/cloud/node_modules/f5-cloud-libs/scripts/cluster.js --output /var/log/cluster.log --log-level debug --host ', variables('mgmtSubnetPrivateAddress'), ' --port ', variables('bigIpMgmtPort'), ' -u admin --password-url file:///config/cloud/passwd --config-sync-ip ', variables('intSubnetPrivateAddress'), ' --create-group --device-group Sync --sync-type sync-failover --device ', concat(variables('instanceName'), '0.', resourceGroup().location, '.cloudapp.azure.com'), ' --network-failover --auto-sync --save-on-auto-sync', '; if [[ $? == 0 ]]; then tmsh load sys application template f5.service_discovery.tmpl; ', variables('routeCmdArray')[parameters('bigIpVersion')], '; rm -f /config/cloud/passwd; bash /config/customConfig.sh; else exit 1; fi')]"
        },
        "publisher": "Microsoft.Azure.Extensions",
        "settings": {
          "fileUris": [
            "[concat('https://raw.githubusercontent.com/F5Networks/f5-cloud-libs/', variables('f5CloudLibsTag'), '/dist/f5-cloud-libs.tar.gz')]",
            "[concat('https://raw.githubusercontent.com/F5Networks/f5-cloud-iapps/', variables('f5CloudIappsTag'), '/f5-service-discovery/f5.service_discovery.tmpl')]"
          ]
        },
        "type": "CustomScript",
        "typeHandlerVersion": "2.0"
      },
      "tags": {
        "application": "[parameters('tagValues').application]",
        "costCenter": "[parameters('tagValues').cost]",
        "environment": "[parameters('tagValues').environment]",
        "f5": "[variables('f5Tag')]",
        "f5Template": "[variables('f5TemplateTag')]",
        "group": "[parameters('tagValues').group]",
        "owner": "[parameters('tagValues').owner]"
      },
      "type": "Microsoft.Compute/virtualMachines/extensions"
    },
    {
      "apiVersion": "[variables('computeApiVersion')]",
      "dependsOn": [
        "[concat('Microsoft.Compute/virtualMachines/', variables('dnsLabel'), '-', variables('instanceName'), '1')]"
      ],
      "location": "[variables('location')]",
      "name": "[concat(variables('dnsLabel'), '-', variables('instanceName'), '1/start')]",
      "properties": {
        "autoUpgradeMinorVersion": "true",
        "protectedSettings": {
          "commandToExecute": "[concat('mkdir /config/cloud && cp f5-cloud-libs.tar.gz* /config/cloud; mkdir -p /config/cloud/node_modules; BIG_IP_CREDENTIALS_FILE=/config/cloud/passwd; /usr/bin/install -b -m 755 /dev/null /config/verifyHash; /usr/bin/install -b -m 755 /dev/null /config/installCloudLibs.sh; /usr/bin/install -b -m 400 /dev/null $BIG_IP_CREDENTIALS_FILE; IFS=', variables('singleQuote'), '%', variables('singleQuote'), '; echo -e ', variables('verifyHash'), ' >> /config/verifyHash; echo -e ', variables('installCloudLibs'), ' >> /config/installCloudLibs.sh; echo -e ', variables('installCustomConfig'), ' >> /config/customConfig.sh; echo ', variables('singleQuote'), parameters('adminPassword'), variables('singleQuote'), ' >> $BIG_IP_CREDENTIALS_FILE; unset IFS; bash /config/installCloudLibs.sh; /usr/bin/f5-rest-node /config/cloud/node_modules/f5-cloud-libs/scripts/onboard.js --output /var/log/onboard.log --log-level debug --host ', variables('mgmtSubnetPrivateAddress1'), ' --port ', variables('bigIpMgmtPort'), ' --ssl-port ', variables('bigIpMgmtPort'), ' -u admin --password-url file:///config/cloud/passwd --hostname ', concat(variables('instanceName'), '1.', resourceGroup().location, '.cloudapp.azure.com'),  ' --ntp ', parameters('ntpServer'), ' --tz ', parameters('timeZone'), ' --db tmm.maxremoteloglength:2048 --module ltm:nominal --module afm:none; /usr/bin/f5-rest-node /config/cloud/node_modules/f5-cloud-libs/scripts/network.js --output /var/log/network.log --host ', variables('mgmtSubnetPrivateAddress1'), ' --port ', variables('bigIpMgmtPort'), ' -u admin --password-url file:///config/cloud/passwd --default-gw ', concat(take(reference(variables('extSubnetRef'), variables('networkApiVersion')).addressPrefix, add(lastIndexOf(reference(variables('extSubnetRef'), variables('networkApiVersion')).addressPrefix, '.'), 1)), add(int(take(split(reference(variables('extSubnetRef'), variables('networkApiVersion')).addressPrefix, '.')[3], indexOf(split(reference(variables('extSubnetRef'), variables('networkApiVersion')).addressPrefix, '.')[3], '/'))), 1)), ' --vlan name:external,nic:1.1 --vlan name:internal,nic:1.2 --self-ip name:self_2nic,address:', variables('extSubnetPrivateAddress1'), skip(reference(variables('extSubnetRef'), variables('networkApiVersion')).addressPrefix, indexOf(reference(variables('extSubnetRef'), variables('networkApiVersion')).addressPrefix, '/')), ',vlan:external --self-ip name:self_3nic,address:', variables('intSubnetPrivateAddress1'), skip(reference(variables('intSubnetRef'), variables('networkApiVersion')).addressPrefix, indexOf(reference(variables('intSubnetRef'), variables('networkApiVersion')).addressPrefix, '/')), ',vlan:internal --log-level debug; /usr/bin/f5-rest-node /config/cloud/node_modules/f5-cloud-libs/scripts/cluster.js --output /var/log/cluster.log --log-level debug --host ', variables('mgmtSubnetPrivateAddress1'), ' --port ', variables('bigIpMgmtPort'), ' -u admin --password-url file:///config/cloud/passwd --config-sync-ip ', variables('intSubnetPrivateAddress1'), ' --join-group --device-group Sync --sync --remote-host ', variables('mgmtSubnetPrivateAddress'), ' --remote-user admin --remote-password-url file:///config/cloud/passwd', '; if [[ $? == 0 ]]; then tmsh load sys application template f5.service_discovery.tmpl; ', variables('routeCmdArray')[parameters('bigIpVersion')], '; rm -f /config/cloud/passwd; bash /config/customConfig.sh; else exit 1; fi')]"
        },
        "publisher": "Microsoft.Azure.Extensions",
        "settings": {
          "fileUris": [
            "[concat('https://raw.githubusercontent.com/F5Networks/f5-cloud-libs/', variables('f5CloudLibsTag'), '/dist/f5-cloud-libs.tar.gz')]",
            "[concat('https://raw.githubusercontent.com/F5Networks/f5-cloud-iapps/', variables('f5CloudIappsTag'), '/f5-service-discovery/f5.service_discovery.tmpl')]"
          ]
        },
        "type": "CustomScript",
        "typeHandlerVersion": "2.0"
      },
      "tags": {
        "application": "[parameters('tagValues').application]",
        "costCenter": "[parameters('tagValues').cost]",
        "environment": "[parameters('tagValues').environment]",
        "f5": "[variables('f5Tag')]",
        "f5Template": "[variables('f5TemplateTag')]",
        "group": "[parameters('tagValues').group]",
        "owner": "[parameters('tagValues').owner]"
      },
      "type": "Microsoft.Compute/virtualMachines/extensions"
    }
  ], 
    "outputs": {
        
    }
}
{
    "$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json",
    "contentVersion": "1.0.0.0",
  "parameters": {
    "location": {
      "type": "string",
      "metadata": {
        "description": "Deployment location"
      }
    },
    "vnetRG": {
      "type": "string"
    },
    "vnetName": {
      "type": "string"

    },
    "subnet2name": {
      "type": "string"
    },
    "subnet1name": {
      "type": "string"
    },
    "subnet3name": {
      "type": "string"
    },
    "vsecVersion": {
      "type": "string",
      "allowedValues": [
        "R77.30 - Bring Your Own License",
        "R77.30 - Pay As You Go (NGTP)",
        "R80.10 - Bring Your Own License",
        "R80.10 - Pay As You Go (NGTP)",
        "R80.10 - Pay As You Go (NGTX)"
      ],
      "defaultValue": "R80.10 - Pay As You Go (NGTP)",
      "metadata": {
        "description": "Version of Check Point vSEC"
      }
    },
    "adminPassword": {
      "type": "string",
      "metadata": {
        "description": "Administrator password"
      }
    },
    "authenticationType": {
      "type": "string",
      "allowedValues": [
        "password",
        "sshPublicKey"
      ],
      "defaultValue": "password",
      "metadata": {
        "description": "Authentication type"
      }
    },
    "sshPublicKey": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Administrator SSH public key"
      }
    },
    "vmName": {
      "type": "string",
      "metadata": {
        "description": "Name of the Check Point Cluster"
      }
    },
    "vmSize": {
      "type": "string",
      "defaultValue": "Standard_D3_v2",
      "metadata": {
        "description": "Size of the VM"
      }
    },
    "sicKey": {
      "type": "string",
      "metadata": {
        "description": "One time key for Secure Internal Communication"
      }
    },
    "Subnet1StartAddress": {
      "type": "string",
      "metadata": {
        "description": "The first available address on the 1st subnet"
      }
    },
    "Subnet2StartAddress": {
      "type": "string",
      "metadata": {
        "description": "The first available address on the 2nd subnet"
      }
    },
    "Subnet3StartAddress": {
      "type": "string",
      "metadata": {
        "description": "The first available address on the 3nd subnet"
      }
    },
    "baseUrl": {
      "type": "string",
      "metadata": {
        "artifactsBaseUrl": ""
      },
      "defaultValue": "https://gallery.azure.com/artifact/20151001/checkpoint.vseccluster.1.0.7/Artifacts"
    },
    "bootstrapScript": {
      "type": "string",
      "metadata": {
        "description": "Bootstrap script"
      },
      "defaultValue": ""
    },
    "allowDownloadFromUploadToCheckPoint": {
      "type": "string",
      "allowedValues": [
        "true",
        "false"
      ],
      "defaultValue": "true",
      "metadata": {
        "description": "Automatically download Blade Contracts and other important data. Improve product experience by sending data to Check Point"
      }
    },
    "additionalDiskSizeGB": {
      "type": "int",
      "defaultValue": 0,
      "metadata": {
        "description": "Amount of additional disk space (in GB)"
      },
      "minValue": 0,
      "maxValue": 3995
    },
    "diskType": {
      "type": "string",
      "defaultValue": "Standard_LRS",
      "metadata": {
        "description": "The type of the OS disk. Premium is applicable only to DS machine sizes"
      },
      "allowedValues": [
        "Standard_LRS",
        "Premium_LRS"
      ]
    },
    "preview": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Deploy the staged image"
      },
      "allowedValues": [
        "",
        "-preview"
      ]
    }
  },
  "variables": {
    "templateName": "cluster",
    "templateVersion": "20170903",
    "location": "[parameters('location')]",
    "usgov": "[startsWith(variables('location'), 'usgov')]",
    "not": {
      "True": false,
      "False": true
    },
    "used": {
      "True": "",
      "False": "-notused"
    },
    "govSuffix": "[variables('used')[string(variables('usgov'))]]",
    "standardSuffix": "[variables('used')[string(variables('not')[string(variables('usgov'))])]]",
    "offers": {
      "R77.30 - Bring Your Own License": "BYOL",
      "R77.30 - Pay As You Go (NGTP)": "NGTP",
      "R80.10 - Bring Your Own License": "BYOL",
      "R80.10 - Pay As You Go (NGTP)": "NGTP-V2",
      "R80.10 - Pay As You Go (NGTX)": "NGTX"
    },
    "offer": "[variables('offers')[parameters('vsecVersion')]]",
    "osVersions": {
      "R77.30 - Bring Your Own License": "R7730",
      "R77.30 - Pay As You Go (NGTP)": "R7730",
      "R80.10 - Bring Your Own License": "R8010",
      "R80.10 - Pay As You Go (NGTP)": "R8010",
      "R80.10 - Pay As You Go (NGTX)": "R8010"
    },
    "osVersion": "[variables('osVersions')[parameters('vsecVersion')]]",

    "storageApiVersion": "[providers('Microsoft.Storage','storageAccounts').apiVersions[0]]",
    "storageAccountName": "[concat('bootdiag', uniqueString(resourceGroup().id, deployment().name))]",
    "storageAccountType": "Standard_LRS",
    "diskSizeGBR7730": 50,
    "diskSizeGBR8010": 100,
    "diskSizeGB": "[add(parameters('additionalDiskSizeGB'), variables(concat('diskSizeGB', variables('osVersion'))))]",
    "locationDiskType": {
      "True": "Standard_LRS",
      "False": "[parameters('diskType')]"
    },
    "customData": "[concat('#!/bin/bash\n', '\n', 'installationType=\"', variables('installationType'), '\"', '\n', 'allowUploadDownload=\"', variables('allowUploadDownload'), '\"', '\n', 'osVersion=\"', variables('osVersion'), '\"', '\n', 'templateName=\"', variables('templateName'), '\"', '\n', 'templateVersion=\"', variables('templateVersion'), '\"', '\n', '\n', 'echo \"template_name: $templateName\" >> /etc/cloud-version\n', 'echo \"template_version: $templateVersion\" >> /etc/cloud-version\n', '\n', 'bootstrap=\"$(dirname \"$0\")/bootstrap\"\n', 'cat <<<\"', variables('bootstrapScript64'), '\" | tr -d \"\\n\" | base64 -d  >\"$bootstrap\"', '\n', 'dos2unix \"$bootstrap\"\n', 'chmod +x \"$bootstrap\"\n', '\"$bootstrap\"\n', '\n', 'function cluster {\n', '    subscriptionId=\"', subscription().subscriptionId, '\"', '\n', '    tenantId=\"', subscription().tenantId, '\"', '\n', '    resourceGroup=\"', resourceGroup().name, '\"', '\n', '    virtualNetwork=\"', parameters('vnetName'), '\"', '\n', '    clusterName=\"', parameters('vmName'), '\"', '\n', '    lbName=\"',variables('lbname'),'\"\n', '    location=\"', parameters('location'), '\"', '\n', '\n', '    case \"$location\" in\n', '    usgov*)\n', '        environment=\"AzureUSGovernment\"\n', '        ;;\n', '    china*)\n', '        environment=\"AzureChinaCloud\"\n', '        ;;\n', '    germany*)\n', '        environment=\"AzureGermanCloud\"\n', '        ;;\n', '    *)\n', '        environment=\"AzureCloud\"\n', '        ;;\n', '    esac\n', '\n', '    cat <<EOF >\"$FWDIR/conf/azure-ha.json\"\n', '{\n', '  \"debug\": false,\n', '  \"subscriptionId\": \"$subscriptionId\",\n', '  \"location\": \"$location\",\n', '  \"environment\": \"$environment\",\n', '  \"resourceGroup\": \"$resourceGroup\",\n', '  \"credentials\": {\n', '    \"tenant\": \"$tenantId\",\n', '    \"grant_type\": \"client_credentials\",\n', '    \"client_id\": \"\",\n', '    \"client_secret\": \"\"\n', '  },\n', '  \"proxy\": \"\",\n', '  \"virtualNetwork\": \"$virtualNetwork\",\n', '  \"clusterName\": \"$clusterName\",\n', '  \"lbName\": \"$lbName\"\n', '}\n', 'EOF\n', '}\n', '\n', '\n', 'case \"$installationType\" in\n', 'gateway)\n', '    installSecurityGateway=true\n', '    gateway_cluster_member=false\n', '    installSecurityManagement=false\n', '    sicKey=\"', variables('sicKey'), '\"', '\n', '    ;;\n', 'cluster)\n', '    installSecurityGateway=true\n', '    gateway_cluster_member=true\n', '    installSecurityManagement=false\n', '    sicKey=\"', variables('sicKey'), '\"', '\n', '    cluster\n', '    ;;\n', 'vmss)\n', '    installSecurityGateway=true\n', '    gateway_cluster_member=false\n', '    installSecurityManagement=false\n', '    sicKey=\"', variables('sicKey'), '\"', '\n', '    ;;\n', 'management)\n', '    installSecurityGateway=false\n', '    installSecurityManagement=true\n', '    sicKey=notused\n', '    ;;\n', 'custom)\n', '    exit 0\n', '    ;;\n', 'standalone | *)\n', '    installSecurityGateway=true\n', '    installSecurityManagement=true\n', '    gateway_cluster_member=false\n', '    sicKey=notused\n', '    ;;\n', 'esac\n', '\n', 'conf=\"install_security_gw=$installSecurityGateway\"\n', 'if \"$installSecurityGateway\"; then\n', '    conf=\"${conf}&install_ppak=true\"\n', '    conf=\"${conf}&gateway_cluster_member=$gateway_cluster_member\"\n', 'fi\n', 'conf=\"${conf}&install_security_managment=$installSecurityManagement\"\n', 'if \"$installSecurityManagement\"; then\n', '    if [ \"R7730\" == \"$osVersion\" ]; then\n', '        managementAdminPassword=\"$(dd if=/dev/urandom count=1 2>/dev/null | sha1sum | cut -c -28)\"\n', '        conf=\"${conf}&mgmt_admin_name=admin\"\n', '        conf=\"${conf}&mgmt_admin_passwd=${managementAdminPassword}\"\n', '    else\n', '        conf=\"${conf}&mgmt_admin_radio=gaia_admin\"\n', '    fi\n', '\n', '    managementGUIClientNetwork=\"', variables('managementGUIClientNetwork'), '\"', '\n', '    ManagementGUIClientBase=\"$(echo \"$managementGUIClientNetwork\" | cut -d / -f 1)\"\n', '    ManagementGUIClientMaskLength=\"$(echo \"$managementGUIClientNetwork\" | cut -d / -f 2)\"\n', '\n', '    conf=\"${conf}&install_mgmt_primary=true\"\n', '    conf=\"${conf}&mgmt_gui_clients_radio=network\"\n', '    conf=\"${conf}&mgmt_gui_clients_ip_field=$ManagementGUIClientBase\"\n', '    conf=\"${conf}&mgmt_gui_clients_subnet_field=$ManagementGUIClientMaskLength\"\n', 'fi\n', 'conf=\"${conf}&ftw_sic_key=$sicKey\"\n', '\n', 'conf=\"${conf}&download_info=$allowUploadDownload\"\n', 'conf=\"${conf}&upload_info=$allowUploadDownload\"\n', '\n', 'config_system -s \"$conf\"\n', '\n', 'if \"$installSecurityManagement\" && [ \"R7730\" != \"$osVersion\" ]; then\n', '    chkconfig --add autoprovision\n', 'fi\n', '\n', 'if [ \"vmss\" == \"$installationType\" ]; then\n', '    addr=\"$(ip addr show dev eth0 | awk \"/inet/{print \\$2; exit}\" | cut -d / -f 1)\"\n', '    dynamic_objects -n LocalGateway -r \"$addr\" \"$addr\" -a\n', 'fi\n', '\n', 'if \"$installSecurityGateway\"; then\n', '    shutdown -r now\n', 'else\n', '    if \"$installSecurityManagement\" && [ \"R7730\" != \"$osVersion\" ]; then\n', '        service autoprovision start\n', '    fi\n', 'fi\n')]",
    "imageOfferR7730": "check-point-r77-10",
    "imageOfferR8010": "check-point-vsec-r80",
    "imageOffer": "[concat(variables(concat('imageOffer', variables('osVersion'))), parameters('preview'))]",
    "imagePublisher": "checkpoint",
    "imageReferenceBYOL": {
      "offer": "[variables('imageOffer')]",
      "publisher": "[variables('imagePublisher')]",
      "sku": "sg-byol",
      "version": "latest"
    },
    "imageReferenceNGTP": {
      "offer": "[variables('imageOffer')]",
      "publisher": "[variables('imagePublisher')]",
      "sku": "sg-ngtp",
      "version": "latest"
    },
    "imageReferenceNGTP-V2": {
      "offer": "[variables('imageOffer')]",
      "publisher": "[variables('imagePublisher')]",
      "sku": "sg-ngtp-v2",
      "version": "latest"
    },
    "imageReferenceNGTX": {
      "offer": "[variables('imageOffer')]",
      "publisher": "[variables('imagePublisher')]",
      "sku": "sg-ngtx",
      "version": "latest"
    },
    "imageReference": "[variables(concat('imageReference', variables('offer')))]",
    "nic1Name": "[concat(parameters('vmName'), '-eth0')]",
    "nic2Name": "[concat(parameters('vmName'), '-eth1')]",
    "nic3Name": "[concat(parameters('vmName'), '-eth2')]",
    "lbId": "[resourceId('Microsoft.Network/loadBalancers', variables('lbName'))]",
    "lbName": "[concat(parameters('vmName'), 'lb')]",
    "linuxConfigurationpassword": {},
    "linuxConfigurationsshPublicKey": {
      "disablePasswordAuthentication": "true",
      "ssh": {
        "publicKeys": [
          {
            "keyData": "[parameters('sshPublicKey')]",
            "path": "/home/notused/.ssh/authorized_keys"
          }
        ]
      }
    },
    "linuxConfiguration": "[variables(concat('linuxConfiguration', parameters('authenticationType')))]",
    "planBYOL": {
      "name": "sg-byol",
      "product": "[variables('imageOffer')]",
      "publisher": "[variables('imagePublisher')]"
    },
    "planNGTP": {
      "name": "sg-ngtp",
      "product": "[variables('imageOffer')]",
      "publisher": "[variables('imagePublisher')]"
    },
    "planNGTP-V2": {
      "name": "sg-ngtp-v2",
      "product": "[variables('imageOffer')]",
      "publisher": "[variables('imagePublisher')]"
    },
    "planNGTX": {
      "name": "sg-ngtx",
      "product": "[variables('imageOffer')]",
      "publisher": "[variables('imagePublisher')]"
    },
    "plan": "[variables(concat('plan', variables('offer')))]",
    "externalPrivateAddresses": [
      "[parameters('Subnet1StartAddress')]",
      "[concat(split(parameters('Subnet1StartAddress'), '.')[0],'.', split(parameters('Subnet1StartAddress'), '.')[1],'.', split(parameters('Subnet1StartAddress'), '.')[2],'.', string(add(int(split(parameters('Subnet1StartAddress'), '.')[3]),1)))]"
    ],
    "Subnet2PrivateAddresses": [
      "[parameters('Subnet2StartAddress')]",
      "[concat(split(parameters('Subnet2StartAddress'), '.')[0],'.', split(parameters('Subnet2StartAddress'), '.')[1],'.', split(parameters('Subnet2StartAddress'), '.')[2],'.', string(add(int(split(parameters('Subnet2StartAddress'), '.')[3]),1)))]"
    ],
    "Subnet3PrivateAddresses": [
      "[parameters('Subnet3StartAddress')]",
      "[concat(split(parameters('Subnet3StartAddress'), '.')[0],'.', split(parameters('Subnet3StartAddress'), '.')[1],'.', split(parameters('Subnet3StartAddress'), '.')[2],'.', string(add(int(split(parameters('Subnet3StartAddress'), '.')[3]),1)))]"
    ],
    "publicIPAddressName": "[parameters('vmName')]",
    "publicIPAddressId": "[resourceId('Microsoft.Network/publicIPAddresses', variables('publicIPAddressName'))]",
    "publicIPAddressName1": "[concat(parameters('vmName'),'pip', 1)]",
    "publicIPAddressId1": "[resourceId('Microsoft.Network/publicIPAddresses', variables('publicIPAddressName1'))]",
    "publicIPAddressName2": "[concat(parameters('vmName'),'pip', 2)]",
    "publicIPAddressId2": "[resourceId('Microsoft.Network/publicIPAddresses', variables('publicIPAddressName2'))]",
    "availabilitySetName": "[concat(parameters('vmName'), 'AS')]",
    "count": 2,
    "frontEndIPConfMember1Id": "[concat(variables('lbId'), '/frontendIPConfigurations/LoadBalancerFrontEnd1')]",
    "frontEndIPConfMember2Id": "[concat(variables('lbId'), '/frontendIPConfigurations/LoadBalancerFrontEnd2')]",
    "member1IPConfigId": "[concat(variables('lbId'), '/frontendIPConfigurations/LoadBalancerFrontEnd1')]",
    "member2IPConfigId": "[concat(variables('lbId'), '/frontendIPConfigurations/LoadBalancerFrontEnd2')]",
    "bootstrapScript64": "[base64(parameters('bootstrapScript'))]",
    "allowUploadDownload": "[parameters('allowDownloadFromUploadToCheckPoint')]",

    "sicKey": "[parameters('sicKey')]",
    "managementGUIClientNetwork": "",
    "installationType": "cluster",
    "vnetID": "[resourceId(parameters('vnetRG'), 'Microsoft.Network/virtualNetworks', parameters('vnetName'))]",
    "subnet2Ref": "[concat(variables('vnetID'),'/subnets/', parameters('subnet2name'))]",
    "subnet1Ref": "[concat(variables('vnetID'),'/subnets/', parameters('subnet1name'))]",
    "subnet3Ref": "[concat(variables('vnetID'),'/subnets/', parameters('subnet3name'))]"

  },
  "resources": [
    {
      "type": "Microsoft.Storage/storageAccounts",
      "name": "[variables('storageAccountName')]",
      "apiVersion": "[providers('Microsoft.Storage','storageAccounts').apiVersions[0]]",
      "location": "[variables('location')]",
      "sku": {
        "name": "[variables('storageAccountType')]"
      },
      "kind": "Storage",
      "tags": {
        "resourcename": "[variables('storageAccountName')]",
        "tier": "Microsoft.Storage/storageAccounts",
        "lifecycle": "production",
        "dataclassification": "",
        "costcenter": "",
        "businessregion": "eu",
        "cloudregion": "[parameters('location')]",
        "company": "Realex",
        "organization": "bts.ireland"
      }
    },

    {
      "type": "Microsoft.Compute/availabilitySets",
      "apiVersion": "[providers('Microsoft.Compute','availabilitySets').apiVersions[0]]",
      "location": "[parameters('location')]",
      "name": "[variables('availabilitySetName')]",
      "properties": {
        "platformFaultDomainCount": 2
      },
      "sku": {
        "name": "Aligned"
      },
      "tags": {
        "resourcename": "[variables('availabilitySetName')]",
        "tier": "Microsoft.Compute/availabilitySets",
        "lifecycle": "production",
        "dataclassification": "",
        "costcenter": "",
        "businessregion": "eu",
        "cloudregion": "[parameters('location')]",
        "company": "Realex",
        "organization": "bts.ireland"
      }
    },

    {
      "type": "Microsoft.Network/publicIPAddresses",
      "apiVersion": "[providers('Microsoft.Network','publicIPAddresses').apiVersions[0]]",
      "location": "[variables('location')]",
      "name": "[variables('publicIPAddressName')]",
      "properties": {
        "idleTimeoutInMinutes": 30,
        "publicIPAllocationMethod": "Static",
        "dnsSettings": {
          "domainNameLabel": "[concat(toLower(parameters('vmName')), '-', uniquestring(resourceGroup().id, deployment().name))]"
        }
      },
      "tags": {
        "resourcename": "variables('publicIPAddressName')",
        "tier": "Microsoft.Network/publicIPAddresses",
        "lifecycle": "production",
        "dataclassification": "",
        "costcenter": "",
        "businessregion": "eu",
        "cloudregion": "[parameters('location')]",
        "company": "Realex",
        "organization": "bts.ireland"
      }
    },
    {
      "type": "Microsoft.Network/publicIPAddresses",
      "apiVersion": "[providers('Microsoft.Network','publicIPAddresses').apiVersions[0]]",
      "location": "[variables('location')]",
      "name": "[concat(parameters('vmName'),'pip', copyIndex(1))]",
      "copy": {
        "name": "publicAddressCopy",
        "count": "[variables('count')]"
      },
      "properties": {
        "idleTimeoutInMinutes": 30,
        "publicIPAllocationMethod": "Static",
        "dnsSettings": {
          "domainNameLabel": "[concat(toLower(parameters('vmName')), '-', copyIndex(1), '-', uniquestring(resourceGroup().id, deployment().name))]"
        }
      },
      "tags": {
        "resourcename": "[concat(parameters('vmName'),'pip', copyIndex(1))]",
        "tier": "Microsoft.Network/publicIPAddresses",
        "lifecycle": "production",
        "dataclassification": "",
        "costcenter": "",
        "businessregion": "eu",
        "cloudregion": "[parameters('location')]",
        "company": "Realex",
        "organization": "bts.ireland"
      }
    },
    {
      "type": "Microsoft.Network/loadBalancers",
      "apiVersion": "[providers('Microsoft.Network','loadBalancers').apiVersions[0]]",
      "dependsOn": [
        "publicAddressCopy"
      ],
      "location": "[variables('location')]",
      "name": "[variables('lbName')]",
      "properties": {
        "frontendIPConfigurations": [
          {
            "name": "[concat('LoadBalancerFrontEnd', 1)]",
            "properties": {
              "publicIPAddress": {
                "id": "[variables(concat('publicIPAddressId', 1))]"
              }
            }
          },
          {
            "name": "[concat('LoadBalancerFrontEnd', 2)]",
            "properties": {
              "publicIPAddress": {
                "id": "[variables(concat('publicIPAddressId', 2))]"
              }
            }
          }
        ],
        "inboundNatRules": [
          {
            "name": "HTTPS-LBtoCP",
            "properties": {
              "backendPort": 443,
              "frontendIPConfiguration": {
                "id": "[variables('member1IPConfigId')]"
              },
              "frontendPort": 443,
              "protocol": "tcp"
            }
          },
          {
            "name": "HTTPS-LBtoCP2",
            "properties": {
              "backendPort": 1443,
              "frontendIPConfiguration": {
                "id": "[variables('member2IPConfigId')]"
              },
              "frontendPort": 443,
              "protocol": "tcp"
            }
          }
        ]
      },
      "tags": {
        "resourcename": "[variables('lbName')]",
        "tier": "Microsoft.Network/loadBalancers",
        "lifecycle": "production",
        "dataclassification": "",
        "costcenter": "",
        "businessregion": "eu",
        "cloudregion": "[parameters('location')]",
        "company": "Realex",
        "organization": "bts.ireland"
      }
    },
    {
      "type": "Microsoft.Network/networkInterfaces",
      "apiVersion": "[providers('Microsoft.Network','networkInterfaces').apiVersions[0]]",
      "dependsOn": [
        "[variables('lbId')]",
        "[variables('publicIPAddressId')]"
      ],
      "location": "[variables('location')]",
      "name": "[concat(parameters('vmName'), '1-', variables('nic1Name'))]",
      "properties": {
        "enableIPForwarding": true,
        "ipConfigurations": [
          {
            "name": "ipconfig1",
            "properties": {
              "privateIPAddress": "[variables('externalPrivateAddresses')[0]]",
              "privateIPAllocationMethod": "Static",
              "PublicIpAddress": {
                "Id": "[variables('publicIPAddressId')]"
              },
              "subnet": {
                "id": "[variables('subnet1Ref')]"
              },
              "loadBalancerInboundNatRules": [
                {
                  "id": "[concat(variables('lbId'), '/inboundNatRules/HTTPS-LBtoCP')]"
                },
                {
                  "id": "[concat(variables('lbId'), '/inboundNatRules/HTTPS-LBtoCP2')]"
                }
              ]
            }
          }
        ]
      },
      "tags": {
        "resourcename": "[concat(parameters('vmName'), '1-', variables('nic1Name'))]",
        "tier": "Microsoft.Network/networkInterfaces",
        "lifecycle": "production",
        "dataclassification": "",
        "costcenter": "",
        "businessregion": "eu",
        "cloudregion": "[parameters('location')]",
        "company": "Realex",
        "organization": "bts.ireland"
      }
    },
    {
      "type": "Microsoft.Network/networkInterfaces",
      "apiVersion": "[providers('Microsoft.Network','networkInterfaces').apiVersions[0]]",
      "dependsOn": [
        "[variables('lbId')]"
      ],
      "location": "[variables('location')]",
      "name": "[concat(parameters('vmName'), '2-', variables('nic1Name'))]",
      "properties": {
        "enableIPForwarding": true,
        "ipConfigurations": [
          {
            "name": "ipconfig1",
            "properties": {
              "privateIPAddress": "[variables('externalPrivateAddresses')[1]]",
              "privateIPAllocationMethod": "Static",

              "loadBalancerInboundNatRules": [

              ],
              "subnet": {
                "id": "[variables('subnet1Ref')]"
              }
            }
          }
        ]
      },
      "tags": {
        "resourcename": "[concat(parameters('vmName'), '2-', variables('nic1Name'))]",
        "tier": "Microsoft.Network/networkInterfaces",
        "lifecycle": "production",
        "dataclassification": "",
        "costcenter": "",
        "businessregion": "eu",
        "cloudregion": "[parameters('location')]",
        "company": "Realex",
        "organization": "bts.ireland"
      }
    },
    {
      "type": "Microsoft.Network/networkInterfaces",
      "apiVersion": "[providers('Microsoft.Network','networkInterfaces').apiVersions[0]]",

      "location": "[variables('location')]",
      "name": "[concat(parameters('vmName'), copyIndex(1), '-', variables('nic2Name'))]",
      "copy": {
        "name": "interface2Copy",
        "count": "[variables('count')]"
      },
      "properties": {
        "enableIPForwarding": true,
        "ipConfigurations": [
          {
            "name": "ipconfig1",
            "properties": {
              "privateIPAddress": "[variables('Subnet2PrivateAddresses')[copyIndex(0)]]",
              "privateIPAllocationMethod": "Static",
              "subnet": {
                "id": "[variables('subnet2Ref')]"
              }
            }
          }
        ]
      },
      "tags": {
        "resourcename": "[concat(parameters('vmName'), copyIndex(1), '-', variables('nic2Name'))]",
        "tier": "Microsoft.Network/networkInterfaces",
        "lifecycle": "production",
        "dataclassification": "",
        "costcenter": "",
        "businessregion": "eu",
        "cloudregion": "[parameters('location')]",
        "company": "Realex",
        "organization": "bts.ireland"
      }
    },
    {
      "type": "Microsoft.Network/networkInterfaces",
      "apiVersion": "[providers('Microsoft.Network','networkInterfaces').apiVersions[0]]",

      "location": "[variables('location')]",
      "name": "[concat(parameters('vmName'), copyIndex(1), '-', variables('nic3Name'))]",
      "copy": {
        "name": "interface3Copy",
        "count": "[variables('count')]"
      },
      "properties": {
        "enableIPForwarding": true,
        "ipConfigurations": [
          {
            "name": "ipconfig1",
            "properties": {
              "privateIPAddress": "[variables('Subnet3PrivateAddresses')[copyIndex(0)]]",
              "privateIPAllocationMethod": "Static",
              "subnet": {
                "id": "[variables('subnet3Ref')]"
              }
            }
          }
        ]
      },
      "tags": {
        "resourcename": "[concat(parameters('vmName'), copyIndex(1), '-', variables('nic3Name'))]",
        "tier": "Microsoft.Network/networkInterfaces",
        "lifecycle": "production",
        "dataclassification": "",
        "costcenter": "",
        "businessregion": "eu",
        "cloudregion": "[parameters('location')]",
        "company": "Realex",
        "organization": "bts.ireland"
      }
    },
    {
      "type": "Microsoft.Compute/virtualMachines",
      "apiVersion": "[providers('Microsoft.Compute','virtualMachines').apiVersions[0]]",
      "dependsOn": [
        "[resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName'))]",
        "[resourceId('Microsoft.Compute/availabilitySets', variables('availabilitySetName'))]",
        "[resourceId('Microsoft.Network/networkInterfaces', concat(parameters('vmName'), copyIndex(1), '-', variables('nic1Name')))]",
        "[resourceId('Microsoft.Network/networkInterfaces', concat(parameters('vmName'), copyIndex(1), '-', variables('nic2Name')))]",
        "[resourceId('Microsoft.Network/networkInterfaces', concat(parameters('vmName'), copyIndex(1), '-', variables('nic3Name')))]"
      ],
      "location": "[variables('location')]",
      "name": "[concat(parameters('vmName'), copyIndex(1))]",
      "copy": {
        "name": "virtualMachineCopy",
        "count": "[variables('count')]"
      },
      "plan": "[variables('plan')]",
      "properties": {
        "availabilitySet": {
          "id": "[resourceId('Microsoft.Compute/availabilitySets', variables('availabilitySetName'))]"
        },
        "diagnosticsProfile": {
          "bootDiagnostics": {
            "enabled": true,
            "storageUri": "[reference(resourceId('Microsoft.Storage/storageAccounts/', variables('storageAccountName')), variables('storageApiVersion')).primaryEndpoints.blob]"
          }
        },
        "hardwareProfile": {
          "vmSize": "[parameters('vmSize')]"
        },
        "networkProfile": {
          "networkInterfaces": [
            {
              "id": "[resourceId('Microsoft.Network/networkInterfaces', concat(parameters('vmName'), copyIndex(1), '-', variables('nic1Name')))]",
              "properties": {
                "primary": true
              }
            },
            {
              "id": "[resourceId('Microsoft.Network/networkInterfaces', concat(parameters('vmName'), copyIndex(1), '-', variables('nic2Name')))]",
              "properties": {
                "primary": false
              }
            },
            {
              "id": "[resourceId('Microsoft.Network/networkInterfaces', concat(parameters('vmName'), copyIndex(1), '-', variables('nic3Name')))]",
              "properties": {
                "primary": false
              }
            }
          ]
        },
        "osProfile": {
          "adminPassword": "[parameters('adminPassword')]",
          "adminUsername": "notused",
          "computername": "[concat(toLower(parameters('vmName')), copyIndex(1))]",
          "customData": "[base64(variables('customData'))]",
          "linuxConfiguration": "[variables('linuxConfiguration')]"
        },
        "storageProfile": {
          "imageReference": "[variables('imageReference')]",
          "osDisk": {
            "caching": "ReadWrite",
            "createOption": "FromImage",
            "diskSizeGB": "[variables('diskSizeGB')]",
            "name": "[concat(parameters('vmName'), copyIndex(1))]",
            "managedDisk": {
              "storageAccountType": "[parameters('diskType')]"
            }
          }
        }
      },
      "tags": {
        "resourcename": "[concat(parameters('vmName'), copyIndex(1))]",
        "tier": "Microsoft.Compute/virtualMachines",
        "lifecycle": "production",
        "dataclassification": "",
        "costcenter": "",
        "businessregion": "eu",
        "cloudregion": "[parameters('location')]",
        "company": "Realex",
        "organization": "bts.ireland"
      }
    }
  ],
    "outputs": {
        "ClusterIPAddr": {
            "type": "string",
            "value": "[reference(variables('publicIPAddressId')).IpAddress]"
        },
        "ClusterFQDN": {
            "type": "string",
            "value": "[reference(variables('publicIPAddressId')).dnsSettings.fqdn]"
        },
        "Member1IPAddr": {
            "type": "string",
            "value": "[reference(variables('publicIPAddressId1')).IpAddress]"
        },
        "Member1FQDN": {
            "type": "string",
            "value": "[reference(variables('publicIPAddressId1')).dnsSettings.fqdn]"
        },
        "Member2IPAddr": {
            "type": "string",
            "value": "[reference(variables('publicIPAddressId2')).IpAddress]"
        },
        "Member2FQDN": {
            "type": "string",
            "value": "[reference(variables('publicIPAddressId2')).dnsSettings.fqdn]"
        }
    }
}